
/*Модуль 1. 1.
  |============================
/*
Інструкція (statement) - це пов'язаний набір слів і символів із синтаксису мови, які об'єднуються з метою вираження однієї ідеї, однієї інструкції для машини.

Інструкції в JavaScript завершуються крапкою з комою, яку можна порівняти із крапкою наприкінці речення вашої рідної мови.

a і b - змінні(як в алгебраїчному рівнянні), це сховища даних, які використовує програма.
2 - просто число. Це називається значенням літерала (literal value), тому що не зберігається у змінній.
= і * - оператори, вчиняють дії над значеннями і змінними.

Вираз (expression) - посилання на змінну або значення, або на набір змінних і значень в поєднанні з операторами.
Інтерфейс - це набір властивостей і методів сутності, доступних для використання у вихідному коді.

Синтаксис звернення до властивості дуже простий - через крапку.
сутність.ім`я_властивості;
"JavaScript is awesome".length;


Метод
Це виклик дії, наприклад присісти або плавати, тобто якась активна операція.
сутність.ім`я_метода()
Для прикладу звернемось до методу рядка toUpperCase(), який зробить усі літери великими.
"JavaScript is awesome".toUpperCase();

Ідентифікатор - це ім'я змінної, функції або класу. 

Оператор typeof
Використовується для отримання типу значення змінної. Повертає на місце свого виклику тип значення змінної, вказаного після нього - рядок, в якому вказано тип.
let username;
console.log(typeof username); // "undefined"
Метод alert() виводить модальне вікно, текст якого відповідає значенню змінної (або літерала), яку передаємо в дужках.
const message = "JavaScript is awesome!";
alert(message);

confirm() - виводить модальне вікно з повідомленням, і дві кнопки, Ok і Cancel. Натискаючи на Ok, результатом будет true, натискаючи на Cancel - повертається false.

prompt() - виводить модальне вікно з полем введення і кнопками Ok і Cancel. Натискаючи на Ok, результатом буде те, що ввів користувач, у випадку Cancel - повертається null.

Важливо запам'ятати терміни складових виразу. + - * / % називаються оператори, а те, на чому вони застосовуються - операнди.

Оператори порівняння
Використовуються для порівняння двох значень. Результатом свого виконання повертають буль - true або false, тобто «так» або «ні».

a > b і a < b - більше/менше
a >= b і a <= b - більше/менше або дорівнює
a == b - рівність
a != b - нерівність
a === b - строга рівність
a !== b - строга нерівність

Методи Number.parseInt() і Number.parseFloat()
Перетворюють рядок символ за символом, доки це можливо. У разі виникнення помилки повертається підсумкове число.

Метод Number.parseInt() парсить з рядка ціле число.
console.log(Number.parseInt("5px")); // 5

Метод Number.parseFloat() парсить з рядка дробове число.
console.log(Number.parseFloat("5px")); // 5

Перевірка на число
Для перевірки на число можна використовувати метод Number.isNaN(val). Він перевіряє, чи вказане значення є NaN. Метод відповідає на запитання "Це Not A Number?" і повертає:

true - якщо значення val - NaN
false - якщо значення val - не NaN
Для всіх значень val, крім NaN, при передачі в Number.isNaN(val) поверне false. Цей метод не намагається перетворити val в число, а просто виконує перевірку на NaN.

const validNumber = Number("51"); // 51
console.log(Number.isNaN(validNumber)); // false

Властивість length ==> console.log(message.length); // 19

Методи toLowerCase() і toUpperCase() ==> console.log(message.toLowerCase()); // "welcome to bahamas!"

Метод indexOf() ==Юconsole.log(message.indexOf("to")); // 8
повертає позицію (індекс), на якій знаходиться перший збіг підрядка або -1, якщо нічого не знайдено.

Метод includes() ==> productName.includes("н")); // true
Перевіряє, чи міститься підрядок в рядку, повертає буль - true, якщо міститься, і false - в іншому випадку. Регістр символів в рядку і підрядку має значення, оскільки, наприклад, літера "a" не дорівнює літері "А".

Метод endsWith() ==> console.log(jsFileName.endsWith(".js")); // true
Дозволяє визначити, чи завершується рядок символами (підрядком), зазначеними в дужках, повертаючи true або false

Методи replace() і replaceAll() ==> const minifiedCssFileNames = cssFileNames.replaceAll(".css", ".min.css");
Повертає новий рядок, в якому перше (replace) або усі збіги (replaceAll) підрядка замінені на вказане значення.

Метод slice() ==> console.log(productName.slice(0, 4)); // "Repa"
Метод рядків slice (startIndex, endIndex) використовується для створення копії частини або всього рядка. Він робить копію елементів рядка від startIndex і до, але не включно endIndex і повертає новий рядок, не змінюючи оригінал.

6 фолсе значень: null, 0, '', NAN, false, undefined
опрератор нулевого слияния ?? null или undefined

вираз && шукае перший false,
вираз || шукае перший true,

Тернарний оператор
<умова> ? <вираз_якщо_умова_правдива> : <вираз_якщо_умова_хибна>

switch (значення) {
  case значення:
    інструкції;
    break;

  case значення:
    інструкції;
    break;

  default:
    інструкції;
}

======Цикл while
let clientCounter = 18;
const maxClients = 25;

while (clientCounter < maxClients) {
  console.log(clientCounter);
  clientCounter += 1;
}
Цикл do...while
let password = "";
do {
  password = prompt("Введіть пароль довший 4-х символів", "");
} while (password.length < 5);
console.log("Ввели пароль: ", password);

Цикл for
const target = 3;
let sum = 0;
for (let i = 0; i <= target; i += 1) {
  sum += i;
}
console.log(sum);

===================================
Ітерація по масиву
==================================
Цикл for...of
const clients = ["Mango", "Ajax", "Poly"];

for (const client of clients) {
  console.log(client);
}
Присвоєння за посиланням і за значенням
*/
//----          